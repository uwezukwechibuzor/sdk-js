{"code":"import fetch from 'isomorphic-unfetch';\r\nexport class Base {\r\n    apiKey;\r\n    baseUrl;\r\n    constructor(config) {\r\n        this.apiKey = config.apiKey;\r\n        this.baseUrl = config.baseurl || \"https://jsonplaceholder.typicode.com\";\r\n    }\r\n    invoke(endpoint, options) {\r\n        const url = `${this.baseUrl}${endpoint}`;\r\n        const headers = {\r\n            \"Content-Type\": \"application/json\",\r\n            \"api-key\": this.apiKey\r\n        };\r\n        const config = {\r\n            ...options,\r\n            headers\r\n        };\r\n        return fetch(url, config).then(response => {\r\n            if (response.ok) {\r\n                return response.json();\r\n            }\r\n            else {\r\n                throw new Error(response.statusText);\r\n            }\r\n        });\r\n    }\r\n}\r\n","references":["/Users/chibuzordaniel/sdk-pro/node_modules/isomorphic-unfetch/index.d.ts"],"dts":{"name":"/Users/chibuzordaniel/sdk-pro/dist/base.d.ts","writeByteOrderMark":false,"text":"declare type Config = {\r\n    apiKey: string;\r\n    baseurl?: string;\r\n};\r\nexport declare abstract class Base {\r\n    private apiKey;\r\n    private baseUrl;\r\n    constructor(config: Config);\r\n    protected invoke<T>(endpoint: string, options?: RequestInit): Promise<T>;\r\n}\r\nexport {};\r\n"}}
