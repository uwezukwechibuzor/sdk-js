import t from"isomorphic-unfetch";function e(){return e=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(t[o]=r[o])}return t},e.apply(this,arguments)}class r{constructor(t){this.apiKey=void 0,this.baseUrl=void 0,this.apiKey=t.apiKey,this.baseUrl=t.baseurl||"https://jsonplaceholder.typicode.com"}invoke(r,o){const s=`${this.baseUrl}${r}`,n=e({},o,{headers:{"Content-Type":"application/json","api-key":this.apiKey}});return t(s,n).then(t=>{if(t.ok)return t.json();throw new Error(t.statusText)})}}class o extends r{}var s;s=o,[class extends r{getPostById(t){return this.invoke(`/posts/${t}`)}getPosts(){return this.invoke("/posts")}createPost(t){return this.invoke("/posts",{method:"POST",body:JSON.stringify(t)})}}].forEach(t=>{Object.getOwnPropertyNames(t.prototype).forEach(e=>{Object.defineProperty(s.prototype,e,Object.getOwnPropertyDescriptor(t.prototype,e)||Object.create(null))})});export{o as default};
